package io.machinecode.chainlink.test.core.jsl.fluent;

import io.machinecode.chainlink.core.element.JobImpl;
import io.machinecode.chainlink.core.factory.JobFactory;
import io.machinecode.chainlink.jsl.fluent.Jsl;
import io.machinecode.chainlink.spi.element.Job;
import io.machinecode.chainlink.spi.element.task.Chunk.CheckpointPolicy;
import io.machinecode.chainlink.test.core.ExpressionTest;
import io.machinecode.chainlink.test.core.jsl.xml.XmlJobTest;
import junit.framework.Assert;
import org.junit.Test;

/**
 * @author Brent Douglas <brent.n.douglas@gmail.com>
 */
public class FluentJobTest {

    @Test
    public void fluentJobTest() {
        final Job job = JobFactory.produce(Jsl.job()
                .setId("i1")
                .setRestartable("false")
                .setVersion("1.0")
                .addProperty("job-prop", "job-value")
                .addListener(Jsl.listener()
                        .setRef("something")
                        .addProperty("name", "value")
                ).addExecution(Jsl.step()
                        .setId("step1")
                        .setNext("step2")
                        .setAllowStartIfComplete("true")
                        .setStartLimit("0")
                        .addTransition(Jsl.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.next()
                                .setOn("ERROR")
                                .setTo("step3")
                        )
                        .addTransition(Jsl.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Jsl.partition()
                                .setStrategy(Jsl.plan()
                                        .setThreads("4")
                                        .setPartitions("7")
                                        .addProperty("1", "something", "else")
                                )
                        ).setTask(Jsl.batchlet()
                                .setRef("batch1")
                                .addProperty("a", "prop")
                        )
                ).addExecution(Jsl.step()
                        .setId("step2")
                        .setNext("step3")
                        .setAllowStartIfComplete("true")
                        .addTransition(Jsl.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.next()
                                .setOn("ERROR")
                                .setTo("step4")
                        )
                        .addTransition(Jsl.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Jsl.partition()
                                .setStrategy(Jsl.mapper()
                                        .setRef("mapper1")
                                        .addProperty("something", "else")
                                )
                        ).setTask(Jsl.batchlet()
                                .setRef("batch1")
                                .addProperty("a", "prop")
                        )
                ).addExecution(Jsl.step()
                        .setId("step3")
                        .setNext("step4")
                        .setAllowStartIfComplete("true")
                        .addTransition(Jsl.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.next()
                                .setOn("ERROR")
                                .setTo("step4")
                        )
                        .addTransition(Jsl.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Jsl.partition()
                                .setStrategy(Jsl.plan()
                                        .setThreads("4")
                                        .setPartitions("7")
                                        .addProperty("2", "something", "else")
                                )
                        ).setTask(Jsl.chunk()
                                .setItemCount("4")
                                .setSkipLimit("3")
                                .setRetryLimit("3")
                                .setTimeLimit("24")
                                .setCheckpointPolicy(CheckpointPolicy.CUSTOM)
                                .setCheckpointAlgorithm(Jsl.checkpointAlgorithm()
                                        .setRef("checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Jsl.reader()
                                        .setRef("Reader")
                                        .addProperty("", "")
                                )
                                .setProcessor(Jsl.processor()
                                        .setRef("Processor")
                                        .addProperty("", "")
                                )
                                .setWriter(Jsl.writer()
                                        .setRef("Writer")
                                        .addProperty("", "")
                                )
                        )
                ).addExecution(Jsl.step()
                        .setId("step4")
                        .setAllowStartIfComplete("false")
                        .setStartLimit("7")
                        .addTransition(Jsl.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Jsl.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Jsl.partition()
                                .setStrategy(Jsl.mapper()
                                        .setRef("mapper2")
                                        .addProperty("something", "else")
                                )
                        ).setTask(Jsl.chunk()
                                .setItemCount("4")
                                .setSkipLimit("3")
                                .setRetryLimit("3")
                                .setTimeLimit("24")
                                .setCheckpointPolicy(CheckpointPolicy.ITEM)
                                .setCheckpointAlgorithm(Jsl.checkpointAlgorithm()
                                        .setRef("other-checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Jsl.reader()
                                        .setRef("Reader2")
                                        .addProperty("", "")
                                )
                                .setProcessor(Jsl.processor()
                                        .setRef("Processor2")
                                        .addProperty("", "")
                                )
                                .setWriter(Jsl.writer()
                                        .setRef("Writer2")
                                        .addProperty("", "")
                                )
                        )
                ), ExpressionTest.PARAMETERS);
        JobFactory.validate(job);

        Assert.assertEquals("i1", job.getId());
    }


    @Test
    public void defaultValuesTest() {
        final Job job = JobFactory.produce(Jsl.job()
                .setId("i1")
                        //.setRestartable(false)
                        //.setVersion("1.0")
                .addProperty("job-prop", "job-value")
                .addListener(Jsl.listener()
                        .setRef("something")
                        .addProperty("name", "value")
                ).addExecution(Jsl.step()
                        .setId("step1")
                                //.setNext("step2")
                                //.setAllowStartIfComplete(false)
                                //.setStartLimit(0)
                        .setPartition(Jsl.partition()
                                .setStrategy(Jsl.plan()
                                        //.setPartitions(1)
                                        //.setThreads(1)
                                )
                        ).setTask(Jsl.chunk()
                                //.setCheckpointPolicy("item")
                                //.setItemCount(10)
                                //.setSkipLimit(0)
                                //.setRetryLimit(0)
                                //.setTimeLimit(0)
                                .setCheckpointAlgorithm(Jsl.checkpointAlgorithm()
                                        .setRef("other-checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Jsl.filter()
                                        .addInclude(Exception.class)
                                        .addExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Jsl.reader()
                                        .setRef("Reader2")
                                        .addProperty("", "")
                                )
                                .setProcessor(Jsl.processor()
                                        .setRef("Processor2")
                                        .addProperty("", "")
                                )
                                .setWriter(Jsl.writer()
                                        .setRef("Writer2")
                                        .addProperty("", "")
                                )
                        )
                ).addExecution(Jsl.step()
                        .setId("step2")
                ), ExpressionTest.PARAMETERS);

        XmlJobTest.testDefaults(job);
    }

    @Test
    public void validFlowTransitionScopeTest() {
        final Job job = Jsl.job()
                .setId("job1")
                .setRestartable("false")
                .setVersion("1.0")
                .addExecution(Jsl.flow()
                        .setId("flow1")
                        .setNext("step2")
                        .addExecution(Jsl.step()
                                .setId("step3")
                                .setNext("step4")
                        )
                        .addExecution(Jsl.step()
                                .setId("step4")
                        )
                ).addExecution(Jsl.step()
                        .setId("step2")
                );
        final JobImpl impl = JobFactory.produce(job, ExpressionTest.PARAMETERS);
        JobFactory.validate(impl);
    }
}
