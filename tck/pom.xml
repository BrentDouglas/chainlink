<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>chainlink-parent</artifactId>
        <groupId>io.machinecode.chainlink</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>


    <artifactId>chainlink-tck</artifactId>
    <packaging>pom</packaging>
    <modules>
        <module>core</module>
    </modules>

    <properties>
        <tck.source>${project.build.directory}/tck-source</tck.source>

        <container.debug>false</container.debug>
        <wildfly.opts>-server</wildfly.opts> <!-- Need to have something here for arquillian to handle it properly -->
        <glassfish.opts> </glassfish.opts>

        <execution.repository.factory.class>io.machinecode.chainlink.core.repository.memory.MemoryExecutionRepositoryFactory</execution.repository.factory.class>
        <executor.factory.class>io.machinecode.chainlink.core.execution.JndiEventedExecutorFactory</executor.factory.class>
        <registry.factory.class>io.machinecode.chainlink.core.registry.LocalRegistryFactory</registry.factory.class>
        <transport.factory.class>io.machinecode.chainlink.core.transport.LocalTransportFactory</transport.factory.class>
        <mbean.server.factory.class>io.machinecode.chainlink.core.management.jmx.PlatformMBeanServerFactory</mbean.server.factory.class>
        <marshalling.factory.class>io.machinecode.chainlink.core.marshalling.JdkMarshallingFactory</marshalling.factory.class>

        <injector.configuration.source.file>META-INF/batch.xml</injector.configuration.source.file>
        <injector.configuration.destination.file>${injector.configuration.source.file}</injector.configuration.destination.file>
        <cdi.injector.configuration.destination>WEB-INF</cdi.injector.configuration.destination>

        <artifact.loader.factory.class>io.machinecode.chainlink.tck.core.loader.NoOpArtifactLoaderFactory</artifact.loader.factory.class>
        <injector.factory.class>io.machinecode.chainlink.tck.core.inject.NoOpInjectorFactory</injector.factory.class>

        <cdi.artifact.loader.factory.class>io.machinecode.chainlink.inject.cdi.JndiCdiArtifactLoaderFactory</cdi.artifact.loader.factory.class>

        <database.driver>org.h2.Driver</database.driver>
        <database.prefix>h2</database.prefix>

        <version.org.apache.maven.plugins.maven-failsafe-plugin>2.18</version.org.apache.maven.plugins.maven-failsafe-plugin>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.ibm.jbatch</groupId>
            <artifactId>com.ibm.jbatch.tck.spi</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>javax.batch</groupId>
                    <artifactId>javax.batch-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-ehcache</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-gridgain</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-hazelcast</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-infinispan</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-jdbc</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-jpa</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-mongo</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-repository-redis</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-transport-gridgain</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-transport-hazelcast</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-transport-infinispan</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.machinecode.chainlink</groupId>
            <artifactId>chainlink-transport-jgroups</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.sf.trove4j</groupId>
            <artifactId>trove4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.gridgain</groupId>
            <artifactId>gridgain-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.gridgain</groupId>
            <artifactId>gridgain-indexing</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jgroups</groupId>
            <artifactId>jgroups</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jongo</groupId>
            <artifactId>jongo</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongo-java-driver</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>coherence</id>
            <activation>
                <property><name>debug</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>coherence</module>
            </modules>
        </profile>
        <profile>
            <id>seam</id>
            <activation>
                <property><name>seam</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>seam</module>
            </modules>
        </profile>

        <!-- Containers -->
        <profile>
            <id>se</id>
            <activation>
                <property><name>se</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>se</module>
            </modules>
        </profile>
        <profile>
            <id>glassfish</id>
            <activation>
                <property><name>glassfish</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>glassfish</module>
            </modules>
        </profile>
        <profile>
            <id>tomee</id>
            <activation>
                <property><name>tomee</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>tomee</module>
            </modules>
        </profile>
        <profile>
            <id>wildfly</id>
            <activation>
                <property><name>wildfly</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>wildfly</module>
            </modules>
        </profile>
        <profile>
            <id>debug</id>
            <activation>
                <property><name>debug</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <container.debug>true</container.debug>
                <wildfly.opts>-server -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=9009</wildfly.opts>
                <glassfish.opts>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=9009</glassfish.opts>
                <chainlink.opts>-server -Xms256m -Xmx256m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:+UseCompressedOops -Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=9009</chainlink.opts>
            </properties>
        </profile>

        <!-- Transport -->
        <profile>
            <id>tr-coherence</id>
            <activation>
                <property><name>tr-coherence</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <transport.factory.class>io.machinecode.chainlink.tck.coherence.transport.CoherenceTransportFactory</transport.factory.class>
            </properties>
            <modules>
                <module>coherence</module>
            </modules>
            <dependencies>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-transport-coherence</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.oracle.coherence</groupId>
                    <artifactId>coherence</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>tr-gridgain</id>
            <activation>
                <property><name>tr-gridgain</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <transport.factory.class>io.machinecode.chainlink.tck.core.transport.GridGainTransportFactory</transport.factory.class>
            </properties>
        </profile>
        <profile>
            <id>tr-hazelcast</id>
            <activation>
                <property><name>tr-hazelcast</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <transport.factory.class>io.machinecode.chainlink.tck.core.transport.HazelcastTransportFactory</transport.factory.class>
            </properties>
        </profile>
        <profile>
            <id>tr-infinispan</id>
            <activation>
                <property><name>tr-infinispan</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <transport.factory.class>io.machinecode.chainlink.tck.core.transport.InfinispanTransportFactory</transport.factory.class>
            </properties>
        </profile>
        <profile>
            <id>tr-jgroups</id>
            <activation>
                <property><name>tr-jgroups</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <transport.factory.class>io.machinecode.chainlink.tck.core.transport.JGroupsTransportFactory</transport.factory.class>
            </properties>
        </profile>

        <!-- ExecutionRepository -->
        <profile>
            <id>re-coherence</id>
            <activation>
                <property><name>re-coherence</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.repository.coherence.CoherenceExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
            <modules>
                <module>coherence</module>
            </modules>
            <dependencies>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-repository-coherence</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.oracle.coherence</groupId>
                    <artifactId>coherence</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>re-ehcache</id>
            <activation>
                <property><name>re-ehcache</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.EhCacheExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-gridgain</id>
            <activation>
                <property><name>re-gridgain</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.GridGainExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-hazelcast</id>
            <activation>
                <property><name>re-hazelcast</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.HazelcastExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-infinispan</id>
            <activation>
                <property><name>re-infinispan</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.InfinispanExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-jdbc</id>
            <activation>
                <property><name>re-jdbc</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.JdbcExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-jpa</id>
            <activation>
                <property><name>re-jpa</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.JpaExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-mongo</id>
            <activation>
                <property><name>re-mongo</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.MongoExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>
        <profile>
            <id>re-redis</id>
            <activation>
                <property><name>re-redis</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <execution.repository.factory.class>io.machinecode.chainlink.tck.core.repository.RedisExecutionRepositoryFactory</execution.repository.factory.class>
            </properties>
        </profile>

        <!-- Injector -->
        <profile>
            <id>in-cdi</id>
            <activation>
                <property><name>in-cdi</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <artifact.loader.factory.class>${cdi.artifact.loader.factory.class}</artifact.loader.factory.class>
                <injector.factory.class>io.machinecode.chainlink.inject.cdi.CdiInjectorFactory</injector.factory.class>
                <injector.configuration.source.file>META-INF/beans.xml</injector.configuration.source.file>
                <injector.configuration.destination.file>${cdi.injector.configuration.destination}/beans.xml</injector.configuration.destination.file>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-inject-cdi</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.weld.se</groupId>
                    <artifactId>weld-se</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>in-guice</id>
            <activation>
                <property><name>in-guice</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <artifact.loader.factory.class>io.machinecode.chainlink.tck.core.loader.GuiceArtifactLoaderFactory</artifact.loader.factory.class>
                <injector.factory.class>io.machinecode.chainlink.tck.core.inject.VetoInjectorFactory</injector.factory.class>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-inject-guice</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.google.inject</groupId>
                    <artifactId>guice</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.ibm.jbatch</groupId>
                    <artifactId>com.ibm.jbatch.tck</artifactId>
                    <scope>test</scope>
                    <exclusions>
                        <exclusion>
                            <groupId>com.ibm.jbatch</groupId>
                            <artifactId>com.ibm.jbatch.spi</artifactId>
                        </exclusion>
                        <exclusion>
                            <groupId>com.ibm.jbatch</groupId>
                            <artifactId>com.ibm.jbatch.container</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>in-seam</id>
            <activation>
                <property><name>in-seam</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <artifact.loader.factory.class>io.machinecode.chainlink.tck.seam.SeamArtifactLoaderFactory</artifact.loader.factory.class>
                <injector.factory.class>io.machinecode.chainlink.tck.core.inject.VetoInjectorFactory</injector.factory.class>
                <injector.configuration.source.file>META-INF/components.xml</injector.configuration.source.file>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>dom4j</groupId>
                    <artifactId>dom4j</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-inject-seam</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.0-api</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-validator</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.javassist</groupId>
                    <artifactId>javassist</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.seam</groupId>
                    <artifactId>jboss-seam</artifactId>
                    <type>ejb</type>
                    <scope>test</scope>
                    <exclusions>
                        <exclusion>
                            <groupId>org.testng</groupId>
                            <artifactId>testng</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>org.jboss.spec.javax.ejb</groupId>
                    <artifactId>jboss-ejb-api_3.1_spec</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.spec.javax.faces</groupId>
                    <artifactId>jboss-jsf-api_2.1_spec</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>in-spring</id>
            <activation>
                <property><name>in-spring</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <artifact.loader.factory.class>io.machinecode.chainlink.tck.core.loader.SpringArtifactLoaderFactory</artifact.loader.factory.class>
                <injector.configuration.source.file>beans.xml</injector.configuration.source.file>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>io.machinecode.chainlink</groupId>
                    <artifactId>chainlink-inject-spring</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <!-- Database -->
        <profile>
            <id>db-mariadb</id>
            <activation>
                <property><name>db-mariadb</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <database.driver>org.mariadb.jdbc.Driver</database.driver>
                <database.prefix>mariadb</database.prefix>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.mariadb.jdbc</groupId>
                    <artifactId>mariadb-java-client</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>db-postgresql</id>
            <activation>
                <property><name>db-postgresql</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <database.driver>org.postgresql.Driver</database.driver>
                <database.prefix>postgresql</database.prefix>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.postgresql</groupId>
                    <artifactId>postgresql</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>db-derby</id>
            <activation>
                <property><name>db-derby</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <database.driver>org.apache.derby.jdbc.EmbeddedDriver</database.driver>
                <database.prefix>derby</database.prefix>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.apache.derby</groupId>
                    <artifactId>derby</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <!-- Marshaller -->
        <profile>
            <id>ma-jboss</id>
            <activation>
                <property><name>ma-jboss</name></property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <marshalling.factory.class>io.machinecode.chainlink.marshalling.jboss.JBossMarshallingFactory</marshalling.factory.class>
            </properties>
        </profile>
    </profiles>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>ensure-test-properties</id>
                            <phase>none</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <copy file="${root.dir}/test.template.properties"
                                          tofile="${root.dir}/test.properties"
                                          overwrite="false"
                                          filtering="true">
                                        <filterset>
                                            <filter token="root.dir" value="${root.dir}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${root.dir}/tck/chainlink-tck.template.properties"
                                          tofile="${root.dir}/tck/chainlink-tck.properties"
                                          overwrite="false"
                                          filtering="true">
                                        <filterset>
                                            <filter token="root.dir" value="${root.dir}" />
                                        </filterset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                        <execution>
                            <id>create-test-resources</id>
                            <phase>none</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <copy file="${project.basedir}/../core/src/test/resources/coherence-cache-config.xml"
                                          tofile="${project.build.testOutputDirectory}/coherence-cache-config.xml"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/ehcache.xml"
                                          tofile="${project.build.testOutputDirectory}/ehcache.xml"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/hazelcast.xml"
                                          tofile="${project.build.testOutputDirectory}/hazelcast.xml"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/tck-udp.xml"
                                          tofile="${project.build.testOutputDirectory}/tck-udp.xml"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../src/test/resources/${injector.configuration.source.file}"
                                          tofile="${project.build.testOutputDirectory}/${injector.configuration.destination.file}"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/com.ibm.jbatch.tck.spi.JobExecutionWaiterFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/com.ibm.jbatch.tck.spi.JobExecutionWaiterFactory"
                                          overwrite="true">
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ArtifactLoaderFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ArtifactLoaderFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="artifact.loader.factory.class" value="${artifact.loader.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ExecutionRepositoryFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ExecutionRepositoryFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="execution.repository.factory.class" value="${execution.repository.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ExecutorFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.ExecutorFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="executor.factory.class" value="${executor.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.InjectorFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.InjectorFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="injector.factory.class" value="${injector.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.JobLoaderFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.JobLoaderFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="job.loader.factory.class" value="${job.loader.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.SecurityFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.SecurityFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="security.factory.class" value="${security.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.TransactionManagerFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.TransactionManagerFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="transaction.manager.factory.class" value="${transaction.manager.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.RegistryFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.RegistryFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="registry.factory.class" value="${registry.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.TransportFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.TransportFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="transport.factory.class" value="${transport.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.MBeanServerFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.MBeanServerFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="mbean.server.factory.class" value="${mbean.server.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.MarshallingFactory"
                                          tofile="${project.build.testOutputDirectory}/META-INF/services/io.machinecode.chainlink.spi.configuration.factory.MarshallingFactory"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="marshalling.factory.class" value="${marshalling.factory.class}" />
                                        </filterset>
                                    </copy>
                                    <copy file="${project.basedir}/../chainlink-tck.xml"
                                          tofile="${project.build.testOutputDirectory}/chainlink.xml"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="artifact.loader.factory.class" value="${artifact.loader.factory.class}" />
                                            <filter token="execution.repository.factory.class" value="${execution.repository.factory.class}" />
                                            <filter token="executor.factory.class" value="${executor.factory.class}" />
                                            <filter token="transport.factory.class" value="${transport.factory.class}" />
                                            <filter token="registry.factory.class" value="${registry.factory.class}" />
                                            <filter token="injector.factory.class" value="${injector.factory.class}" />
                                            <filter token="job.loader.factory.class" value="${job.loader.factory.class}" />
                                            <filter token="security.factory.class" value="${security.factory.class}" />
                                            <filter token="transaction.manager.factory.class" value="${transaction.manager.factory.class}" />
                                            <filter token="mbean.server.factory.class" value="${mbean.server.factory.class}" />
                                            <filter token="marshalling.factory.class" value="${marshalling.factory.class}" />
                                            <filter token="thread.factory.jndi.name" value="${thread.factory.jndi.name}" />
                                            <filter token="transaction.manager.jndi.name" value="${transaction.manager.jndi.name}" />
                                        </filterset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                        <execution>
                            <id>first-pass-persistence-xml</id>
                            <phase>none</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <copy file="${project.basedir}/../core/src/test/resources/META-INF/persistence.xml"
                                          tofile="${project.build.directory}/persistence-xml/persistence.xml"
                                          filtering="true"
                                          overwrite="true">
                                        <filterset>
                                            <filter token="database.url" value="${database.prefix}.database.url" />
                                            <filter token="database.user" value="${database.prefix}.database.user" />
                                            <filter token="database.password" value="${database.prefix}.database.password" />
                                        </filterset>
                                    </copy>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>second-pass-persistence-xml</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.testOutputDirectory}/META-INF</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.build.directory}/persistence-xml</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>log4j-properties</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${root.dir}</directory>
                                        <includes>
                                            <include>log4j.properties</include>
                                        </includes>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>copy-tck</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>com.ibm.jbatch</groupId>
                                        <artifactId>com.ibm.jbatch.tck.spi</artifactId>
                                        <version>${version.com.ibm.jbatch.com.ibm.jbatch.tck.spi}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${deployment.dir}</outputDirectory>
                                        <destFileName>com.ibm.jbatch.tck.spi-${version.com.ibm.jbatch.com.ibm.jbatch.tck.spi}.jar</destFileName>
                                    </artifactItem>
                                    <artifactItem>
                                        <groupId>io.machinecode.chainlink</groupId>
                                        <artifactId>chainlink-tck-core</artifactId>
                                        <version>${project.version}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${deployment.dir}</outputDirectory>
                                        <destFileName>chainlink-tck-core-${project.version}.jar</destFileName>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-tck-coherence</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>io.machinecode.chainlink</groupId>
                                        <artifactId>chainlink-tck-coherence</artifactId>
                                        <version>${project.version}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${deployment.dir}</outputDirectory>
                                        <destFileName>chainlink-tck-coherence-${project.version}.jar</destFileName>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-tck-seam</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>io.machinecode.chainlink</groupId>
                                        <artifactId>chainlink-tck-seam</artifactId>
                                        <version>${project.version}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${deployment.dir}</outputDirectory>
                                        <destFileName>chainlink-tck-seam-${project.version}.jar</destFileName>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-testng</id>
                            <phase>none</phase>
                            <goals>
                                <goal>copy</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>org.testng</groupId>
                                        <artifactId>testng</artifactId>
                                        <version>${version.org.testng.testng}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${deployment.dir}</outputDirectory>
                                        <destFileName>testng-${version.org.testng.testng}.jar</destFileName>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                        <execution>
                            <id>unpack-tck</id>
                            <phase>none</phase>
                            <goals>
                                <goal>unpack</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>com.ibm.jbatch</groupId>
                                        <artifactId>com.ibm.jbatch.tck</artifactId>
                                        <version>${version.com.ibm.jbatch.com.ibm.jbatch.tck}</version>
                                        <type>jar</type>
                                        <overWrite>true</overWrite>
                                        <outputDirectory>${tck.source}</outputDirectory>
                                        <destFileName>com.ibm.jbatch.tck-${version.com.ibm.jbatch.com.ibm.jbatch.tck}.jar</destFileName>
                                    </artifactItem>
                                </artifactItems>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-failsafe-plugin}</version>
                    <configuration>
                        <skipExec>true</skipExec>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${version.org.apache.maven.plugins.maven-failsafe-plugin}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>integration-test</id>
                            <goals>
                                <goal>integration-test</goal>
                            </goals>
                            <configuration>
                                <includes>
                                    <include>**/**Tests.java</include>
                                </includes>
                                <systemPropertiesFile>${root.dir}/test.properties</systemPropertiesFile>
                                <systemPropertyVariables>
                                    <database.driver>${database.driver}</database.driver>
                                    <database.prefix>${database.prefix}</database.prefix>
                                </systemPropertyVariables>
                            </configuration>
                        </execution>
                        <execution>
                            <id>verify</id>
                            <goals>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>add-test-resources</id>
                            <phase>none</phase>
                            <goals><goal>add-test-resource</goal></goals>
                            <configuration>
                                <resources>
                                    <resource>
                                        <directory>${tck.source}/com</directory>
                                        <targetPath>com</targetPath>
                                    </resource>
                                    <resource>
                                        <directory>${tck.source}/testJobXml/META-INF/batch-jobs</directory>
                                        <targetPath>META-INF/batch-jobs</targetPath>
                                    </resource>
                                    <resource>
                                        <directory>${project.basedir}/src/test/resources</directory>
                                    </resource>
                                    <resource>
                                        <directory>${project.basedir}/../../spi/src/main/resources</directory>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>read-properties</id>
                            <phase>none</phase>
                            <goals>
                                <goal>read-project-properties</goal>
                            </goals>
                            <configuration>
                                <files>
                                    <file>${root.dir}/test.properties</file>
                                </files>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <skipExec>true</skipExec>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>ensure-test-properties</id>
                        <phase>initialize</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
