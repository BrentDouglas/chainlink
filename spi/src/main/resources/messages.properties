# Validation
validation.not.null.element=Must not have null '%s' elementName
validation.decision.first.execution=Decision must not be the first
validation.required.attribute=Attribute '%s' is required
validation.positive.attribute=Attribute '%s' must be positive. Found '%d'
validation.matches.attribute=Attribute '$s' must match any of %s. Found '%s'
validation.non.unique.id=id '%s' defined multiple times
validation.cycle.detected=Cycle detected:
validation.invalid.transition=Element '%s' is transitioning to an elementName that is inaccessible in this scope
validation.executions.required=Job has no execution elements

validation.cant.restart.batch.status=Execution with id '%d' is not eligible for restart. Required '%s' or '%s', found '%s'
validation.cant.restart.job=Execution with id '%d' is not eligible for restart. Job property 'restartable' is false

validation.artifact.id.wrong.class=Artifact with id '%s' and class '%s' does not implement '%s'
validation.cant.load.matching.artifact=Artifact with id '%s' and class '%s' could not be loaded

# Status
status.finish.job.with=JobEx %s: Finishing job with batch status %s and exit status %s
status.finish.step.with=StepEx %s: Finishing step with batch status %s and exit status %s
status.update.job.with=JobEx %s: Updating batch status to %s
status.update.step.with=StepEx %s: Updating batch status to %s
status.start.job=JobEx %s: Starting job

# Job
job.create.job.context=JobEx %s: Job %s creating job context
job.listener.before.job=JobEx %s: Job %s calling job listener before
job.status.early.termination=JobEx %s: Job %s terminating early with batch status %s
job.listener.after.job=JobEx %s: Job %s calling job listener after
job.destroy.job.context=JobEx %s: Job %s destroying job context
job.restart.transition=JobEx %s: Job %s restarting at %s

# Decision
decision.decide=JobEx %s: Decision %s calling decider %s

# Execution
execution.transition=JobEx %s: Transitioning from %s to %s
execution.transition.matched=JobEx %s: Execution %s matched %s transition with %s == %s
execution.transition.skipped=JobEx %s: Execution %s skipped %s transition with %s == %s
execution.transition.statuses=JobEx %s: Execution %s exit status was %s using status %s

# Flow
flow.run=JobEx %s: Run flow %s
flow.after=JobEx %s: After flow %s

# Step
step.transaction.timeout.not.integer=JobEx %s: Step %s transaction timeout value is not an integer. Found '%s'
step.not.starting=JobEx %s: Step %s does not have BatchStatus.STARTING. Found '%s'
step.listener.before.step=JobEx %s: Step %s calling listener.beforeStep
step.listener.after.step=JobEx %s: Step %s calling listener.afterStep
step.update.persistent.data=JobEx %s: Step %s updating persistent info
step.create.step.context=JobEx %s: Step %s creating step context
step.destroy.step.context=JobEx %s: Step %s destroying step context

# Split
split.plan=JobEx %s: Plan split %s
split.run=JobEx %s: Run split %s
split.after=JobEx %s: After split %s

# Mapper
mapper.map.partitions=JobEx %s: Mapper %s calling mapPartitions

# Partition
partition.properties.length=JobEx %s: Properties arrays differs from partions expected %s, found %s
partition.set.transaction.timeout=JobEx %s: Transaction timeout set to %s
partition.before.partitioned.step=JobEx %s: Reducer %s calling beforePartitionedStep
partition.collect.partitioned.data=JobEx %s: Reducer %s calling collectPartitionedData
partition.analyse.collector.data=JobEx %s: Analyser %s calling collectData
partition.before.partitioned.step.complete=JobEx %s: Reducer %s calling beforePartitionedStepComplete
partition.caught.while.analysing=JobEx %s: Caught while analysing partitioned data
partition.rollback.partitioned.step=JobEx %s: Reducer %s calling rollbackPartitionedStep
partition.after.partitioned.step=JobEx %s: Reducer %s calling afterPartitionedStep with partition status %s

# Distribution Plan
plan.threads.not.integer=JobEx %s: Plan threads is expected to be an integer. Found %s
plan.partitions.not.integer=JobEx %s: Plan partitions is expected to be an integer. Found %s

# Batchlet
batchlet.cancelled=JobEx %s: StepEx %s: Batchlet %s cancelled before running
batchlet.process=JobEx %s: StepEx %s: Batchlet %s calling process
batchlet.status=JobEx %s: StepEx %s: Batchlet %s returned %s
batchlet.stop=JobEx %s: Batchlet %s calling stop
batchlet.stop.exception=JobEx %s: Batchlet %s threw when calling stop

# Chunk
chunk.transaction.timeout=JobEx %s: Transaction timeout set to %s

chunk.state.begin=JobEx %s: Chunk state = BEGIN
chunk.state.read=JobEx %s: Chunk state = READ
chunk.state.process=JobEx %s: Chunk state = PROCESS
chunk.state.add=JobEx %s: Chunk state = ADD
chunk.state.write=JobEx %s: Chunk state = WRITE
chunk.state.commit=JobEx %s: Chunk state = COMMIT

chunk.listener.before=JobEx %s: Chunk listener calling beforeChunk
chunk.listener.after=JobEx %s: Chunk listener calling afterChunk
chunk.listener.error=JobEx %s: Chunk listener calling onError

chunk.reader.null=JobEx %s: Chunk could not load ItemReader %s
chunk.reader.open=JobEx %s: Chunk ItemReader %s calling open
chunk.reader.close=JobEx %s: Chunk ItemReader %s calling close
chunk.reader.before=JobEx %s: Chunk ItemReadListener calling beforeRead
chunk.reader.read=JobEx %s: Chunk ItemReader %s calling read
chunk.reader.after=JobEx %s: Chunk ItemReadListener calling afterRead
chunk.reader.error=JobEx %s: Chunk ItemReadListener calling onReadError
chunk.reader.skip=JobEx %s: Chunk ItemReadListener calling onSkipReadItem
chunk.reader.retry=JobEx %s: Chunk ItemReadListener calling onRetryReadException
chunk.reader.checkpoint=JobEx %s: Chunk ItemReader %s calling checkpointInfo

chunk.processor.before=JobEx %s: Chunk ItemProcessListener calling beforeProcess
chunk.processor.process=JobEx %s: Chunk ItemProcessor %s calling process
chunk.processor.after=JobEx %s: Chunk ItemProcessListener calling afterProcess
chunk.processor.error=JobEx %s: Chunk ItemProcessListener calling onProcessError
chunk.processor.skip=JobEx %s: Chunk ItemProcessListener calling onSkipProcessItem
chunk.processor.retry=JobEx %s: Chunk ItemProcessListener calling onRetryProcessException

chunk.writer.null=JobEx %s: Chunk could not load ItemWriter %s
chunk.writer.open=JobEx %s: Chunk ItemWriter %s calling open
chunk.writer.close=JobEx %s: Chunk ItemWriter %s calling close
chunk.writer.before=JobEx %s: Chunk calling ItemWriteListener beforeWrite
chunk.writer.write=JobEx %s: Chunk ItemWriter %s calling write
chunk.writer.after=JobEx %s: Chunk calling ItemWriteListener afterWrite
chunk.writer.error=JobEx %s: Chunk calling ItemWriteListener onWriteError
chunk.writer.skip=JobEx %s: Chunk calling ItemWriteListener onSkipWriteItem
chunk.writer.retry=JobEx %s: Chunk calling ItemWriteListener onRetryWriteException
chunk.writer.checkpoint=JobEx %s: Chunk ItemWriter %s calling checkpointInfo

chunk.exception=JobEx %s: Caught exception while running chunk
chunk.throwable=JobEx %s: Caught throwable while running chunk
chunk.reader.exception.opening=JobEx %s: Caught exception while running opening chunk reader
chunk.reader.throwable.opening=JobEx %s: Caught throwable while running opening chunk reader
chunk.writer.exception.opening=JobEx %s: Caught exception while running opening chunk writer
chunk.writer.throwable.opening=JobEx %s: Caught throwable while running opening chunk writer
chunk.reader.exception.closing=JobEx %s: Caught exception while running closing chunk reader
chunk.reader.throwable.closing=JobEx %s: Caught throwable while running closing chunk reader
chunk.writer.exception.closing=JobEx %s: Caught exception while running closing chunk writer
chunk.writer.throwable.closing=JobEx %s: Caught throwable while running closing chunk writer
chunk.partition.exception.collect=JobEx %s: Caught exception while collecting chunk partition
chunk.partition.throwable.collect=JobEx %s: Caught throwable while collecting chunk partition
chunk.failed=JobEx %s:

# Work
work.execution.before.exception=JobEx %s: BeforeExecution caught exception
work.execution.after.exception=JobEx %s: AfterExecution caught exception
work.job.before.exception=JobEx %s: BeforeJob caught exception
work.job.after.exception=JobEx %s: AfterJob caught exception
work.task.run.exception=JobEx %s: RunTask caught exception

# Executable
executable.resolve=JobEx %s: Resolving executable %s
executable.reject=JobEx %s: Rejecting executable %s
executable.cancel=JobEx %s: Cancelling executable %s
executable.execute=JobEx %s: Running executable %s execute
executable.execute.exception=JobEx %s: Executable %s caught exception
executable.callback=JobEx %s: Running executable %s callback
executable.callback.exception=JobEx %s: Executable %s callback caught exception
executable.then.listener.run=JobEx %s: Running then listener %s for executable %s
executable.then.listener.add=JobEx %s: Adding then listener %s to executable %s
executable.cancel.listener.run=JobEx %s: Running cancel listener %s for executable %s
executable.cancel.listener.add=JobEx %s: Adding cancel listener %s to executable %s
executable.fail.listener.run=JobEx %s: Running fail listener %s for executable %s
executable.fail.listener.add=JobEx %s: Adding fail listener %s to executable %s

# Deferred
deferred.resolve=Resolving deferred
deferred.reject=Rejecting deferred
deferred.cancel=Cancelling deferred
deferred.resolved=Deferred was resolved rather than failed
deferred.rejected=Deferred was rejected
deferred.cancelled=Deferred was cancelled
deferred.timeout=Deferred timed out waiting

# Injector
injector.bean.null=Trying to inject null reference

# Operator
operator.start=Operator starting job %s
operator.restart=JobEx %s: Operator called restart
operator.stop=JobEx %s: Operator called stop
operator.abandon=JobEx %s: Operator called abandon

worker.null=Worker was null. Type was %s, ThreadId was %s\nThreadId's were:\n
