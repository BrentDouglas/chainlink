#!/bin/bash
#
# @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
#
# Script to install Chainlink from either
#

source ./functions
source ./vars

# These should not be mutated
AVAILABLE_MODULES=( all core groovy seam spring guice h2 derby postgresql mariadb jboss-logging jboss-marshalling jdbc jpa infinispan jgroups hazelcast coherence gridgain ehcache redis mongo )
AVAILABLE_CONTAINERS=( se glassfish tomee wildfly )

# These should be read from getopts
ACTION="install"
MODULES=()

SIGUNINSTALL=5
ROLLING_BACK="false"

CHAINLINK_REPOSITORY_DIR="repository"

SE_APP_DIR="app"
SE_LIB_DIR="lib"

GLASSFISH_MODULES_DIR="../glassfish/modules"
GLASSFISH_BACKUP_DIR="backup"

TOMEE_MODULES_DIR="../lib"

WILDFLY_MODULES_DIR="../modules/system/layers/base"
WILDFLY_XML_DIR="modules"

#
# Modules
#

core() {
    local apply="${1}"
    "${apply}" "io.machinecode.then" "then-api" "${version_io_machinecode_then_then_api}" "io/machinecode/then"
    "${apply}" "io.machinecode.then" "then-core" "${version_io_machinecode_then_then_core}" "io/machinecode/then"
    "${apply}" "io.machinecode.chainlink" "chainlink-api" "${version_io_machinecode_chainlink_chainlink_api}"
    "${apply}" "io.machinecode.chainlink" "chainlink-core" "${version_io_machinecode_chainlink_chainlink_core}" "io/machinecode/chainlink"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-cdi" "${version_io_machinecode_chainlink_chainlink_ext_cdi}" "io/machinecode/chainlink/ext/cdi"
    "${apply}" "io.machinecode.chainlink" "chainlink-spi" "${version_io_machinecode_chainlink_chainlink_spi}" "io/machinecode/chainlink"
    "${apply}" "net.sf.trove4j" "trove4j" "${version_net_sf_trove4j_trove4j}" "gnu/trove"
}

groovy() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-groovy" "${version_io_machinecode_chainlink_chainlink_ext_groovy}" "io/machinecode/chainlink/ext/groovy"
    "${apply}" "org.codehaus.groovy" "groovy-all" "${version_org_codehaus_groovy_groovy_all}" "org/codehaus/groovy"
}

seam() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-seam" "${version_io_machinecode_chainlink_chainlink_ext_seam}"
    "${apply}" "org.jboss.seam" "jboss-seam" "${version_org_jboss_seam_jboss_seam}"
    [ "${CONTAINER}" == "se" ] && {
        "${apply}" "javax.servlet" "servlet-api" "${version_javax_servlet_servlet_api}"
    }
}

spring() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-spring" "${version_io_machinecode_chainlink_chainlink_ext_spring}" "io/machinecode/chainlink/ext/spring"
    "${apply}" "org.springframework" "spring-beans" "${version_org_springframework_spring_beans}"
    "${apply}" "org.springframework" "spring-context" "${version_org_springframework_spring_context}"
    "${apply}" "org.springframework" "spring-core" "${version_org_springframework_spring_core}"
}

guice() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-guice" "${version_io_machinecode_chainlink_chainlink_ext_guice}"
    "${apply}" "com.google.inject" "guice" "${version_com_google_inject_guice}"
}

derby() {
    local apply="${1}"
    [ "${CONTAINER}" != "glassfish" ] && {
        "${apply}" "org.apache.derby" "derby" "${version_org_apache_derby_derby}"
    }
}

h2() {
    local apply="${1}"
    "${apply}" "com.h2database" "h2" "${version_com_h2database_h2}"
}

postgresql() {
    local apply="${1}"
    "${apply}" "org.postgresql" "postgresql" "${version_org_postgresql_postgresql}"
}

mariadb() {
    local apply="${1}"
    "${apply}" "org.mariadb.jdbc" "mariadb-java-client" "${version_org_mariadb_jdbc_mariadb_java_client}"
}

jboss-logging() {
    local apply="${1}"
    [ "${CONTAINER}" != "wildfly" ] && {
        "${apply}" "org.jboss.logging" "jboss-logging" "${version_org_jboss_logging_jboss_logging}"
    }
}

jboss-marshalling() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-jboss-marshalling" "${version_io_machinecode_chainlink_chainlink_ext_jboss_marshalling}" "io/machinecode/chainlink"
    [ "${CONTAINER}" != "wildfly" ] && {
        "${apply}" "org.jboss.marshalling" "jboss-marshalling" "${version_org_jboss_marshalling_jboss_marshalling}"
        "${apply}" "org.jboss.marshalling" "jboss-marshalling-river" "${version_org_jboss_marshalling_jboss_marshalling_river}"
    }
}

jdbc() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-jdbc" "${version_io_machinecode_chainlink_chainlink_ext_jdbc}" "io/machinecode/chainlink/ext/jdbc"
}

jpa() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-jpa" "${version_io_machinecode_chainlink_chainlink_ext_jpa}" "io/machinecode/chainlink/ext/jpa"
    [ "${CONTAINER}" == "se" ] && {
        "${apply}" "org.hibernate" "hibernate-core" "${version_org_hibernate_hibernate_core}"
        "${apply}" "org.hibernate" "hibernate-entitymanager" "${version_org_hibernate_hibernate_entitymanager}"
    }
}

infinispan() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-infinispan" "${version_io_machinecode_chainlink_chainlink_ext_infinispan}" "io/machinecode/chainlink/ext/infinispan"
    [ "${CONTAINER}" != "wildfly" ] && {
        "${apply}" "org.infinispan" "infinispan-commons" "${version_org_infinispan_infinispan_commons}"
        "${apply}" "org.infinispan" "infinispan-core" "${version_org_infinispan_infinispan_core}"
    }
}

jgroups() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-jgroups" "${version_io_machinecode_chainlink_chainlink_ext_jgroups}" "io/machinecode/chainlink/ext/jgroups"
    [ "${CONTAINER}" != "wildfly" ] && {
        "${apply}" "org.jgroups" "jgroups" "${version_org_jgroups_jgroups}"
    }
}

hazelcast() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-hazelcast" "${version_io_machinecode_chainlink_chainlink_ext_hazelcast}" "io/machinecode/chainlink/ext/hazelcast"
    "${apply}" "com.hazelcast" "hazelcast" "${version_com_hazelcast_hazelcast}" "com/hazelcast"
}

coherence() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-coherence" "${version_io_machinecode_chainlink_chainlink_ext_coherence}" "io/machinecode/chainlink/ext/coherence"
    "${apply}" "com.oracle.coherence" "coherence" "${version_com_oracle_coherence_coherence}" "com/oracle/coherence"
}

gridgain() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-gridgain" "${version_io_machinecode_chainlink_chainlink_ext_gridgain}" "io/machinecode/chainlink/ext/gridgain"
    "${apply}" "org.gridgain" "gridgain-core" "${version_org_gridgain_gridgain_core}" "org/gridgain"
    "${apply}" "org.gridgain" "gridgain-indexing" "${version_org_gridgain_gridgain_indexing}" "org/gridgain"
}

ehcache() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-ehcache" "${version_io_machinecode_chainlink_chainlink_ext_ehcache}" "io/machinecode/chainlink/ext/ehcache"
    "${apply}" "net.sf.ehcache" "ehcache-core" "${version_net_sf_ehcache_ehcache_core}" "net/sf/ehcache"
}

redis() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-redis" "${version_io_machinecode_chainlink_chainlink_ext_redis}" "io/machinecode/chainlink/ext/redis"
    "${apply}" "redis.clients" "jedis" "${version_redis_clients_jedis}" "jedis"
}

mongo() {
    local apply="${1}"
    "${apply}" "io.machinecode.chainlink" "chainlink-ext-mongo" "${version_io_machinecode_chainlink_chainlink_ext_mongo}" "io/machinecode/chainlink/ext/mongo"
    "${apply}" "org.jongo" "jongo" "${version_org_jongo_jongo}" "org/jongo"
    "${apply}" "org.mongodb" "mongo-java-driver" "${version_org_mongodb_mongo_java_driver}" "org/jongo"
}

all() {
    local apply="${1}"

    for module in "${AVAILABLE_MODULES[@]}"; do
        [ "${module}" != "all" ] && {
            "${module}" "${apply}"
        }
    done
}

#
# Containers
#

se() {
    local apply="${1}"

    "${apply}" "io.machinecode.chainlink" "chainlink-se" "${version_io_machinecode_chainlink_chainlink_se}"
    "${apply}" "io.machinecode.chainlink" "chainlink-server-chainlinkd" "${version_io_machinecode_chainlink_chainlink_server_chainlinkd}"
    "${apply}" "gnu.getopt" "java-getopt" "${version_gnu_getopt_java_getopt}"
    "${apply}" "javax.enterprise" "cdi-api" "${version_javax_enterprise_cdi_api}"
    "${apply}" "javax.inject" "javax.inject" "${version_javax_inject_javax_inject}"
    "${apply}" "log4j" "log4j" "${version_log4j_log4j}"
    "${apply}" "org.jboss.spec.javax.transaction" "jboss-transaction-api_1.1_spec" "${version_org_jboss_spec_javax_transaction_jboss_transaction_api_1_1_spec}"
    "${apply}" "org.jboss.weld.se" "weld-se" "${version_org_jboss_weld_se_weld_se}"

    for module in "${MODULES[@]}"; do
        "${module}" "${apply}"
    done
}

se-validate() {
    return 0
}

se-pre-install() {
    [ -d "${SE_APP_DIR}" ] || {
        mkdir "${SE_APP_DIR}"
    }
    [ -d "${SE_LIB_DIR}" ] || {
        mkdir "${SE_LIB_DIR}"
    }
}

se-post-uninstall() {
    rmdir -p --ignore-fail-on-non-empty "${SE_LIB_DIR}"
}

se-install() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"
    local module="${4}"

    install-jar "${SE_LIB_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

se-uninstall() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"

    uninstall-jar "${SE_LIB_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

glassfish() {
    local apply="${1}"

    "${apply}" "io.machinecode.chainlink" "chainlink-ee-glassfish" "${version_io_machinecode_chainlink_chainlink_ee_glassfish}"

    for module in "${MODULES[@]}"; do
        "${module}" "${apply}"
    done
}

glassfish-validate() {
    [ -e "${CONTAINER_DIR}/glassfish/bin/asadmin" ] || {
        red "Invalid Glassfish home: ${CONTAINER_DIR}"
        usage
        exit 1
    }
}

glassfish-pre-install() {
    [ -d "${GLASSFISH_BACKUP_DIR}" ] || {
        mkdir "${GLASSFISH_BACKUP_DIR}"
    }
    mv ${GLASSFISH_MODULES_DIR}/{glassfish-batch-connector,glassfish-batch-commands,com.ibm.jbatch-ri-spi,com.ibm.jbatch-runtime-all}.jar ${GLASSFISH_BACKUP_DIR}
}

glassfish-post-uninstall() {
    mv ${GLASSFISH_BACKUP_DIR}/{glassfish-batch-connector,glassfish-batch-commands,com.ibm.jbatch-ri-spi,com.ibm.jbatch-runtime-all}.jar ${GLASSFISH_MODULES_DIR}
}

glassfish-install() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"
    local module="${4}"

    install-jar "${GLASSFISH_MODULES_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

glassfish-uninstall() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"

    uninstall-jar "${GLASSFISH_MODULES_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

tomee() {
    local apply="${1}"

    "${apply}" "io.machinecode.chainlink" "chainlink-ee-tomee" "${version_io_machinecode_chainlink_chainlink_ee_tomee}"

    for module in "${MODULES[@]}"; do
        "${module}" "${apply}"
    done
}

tomee-validate() {
    [ -e "${CONTAINER_DIR}/bin/tomee.sh" ] || {
        red "Invalid TomEE home: ${CONTAINER_DIR}"
        usage
        exit 1
    }
}

tomee-pre-install() {
    return 0
}

tomee-post-uninstall() {
    return 0
}

tomee-install() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"
    local module="${4}"

    install-jar "${TOMEE_MODULES_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

tomee-uninstall() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"

    uninstall-jar "${TOMEE_MODULES_DIR}" "${group_id}" "${artifact_id}" "${version}"
}

wildfly() {
    local apply="${1}"

    "${apply}" "io.machinecode.chainlink" "chainlink-ee-wildfly" "${version_io_machinecode_chainlink_chainlink_ee_wildfly}" "io/machinecode/chainlink"

    for module in "${MODULES[@]}"; do
        "${module}" "${apply}"
    done
}

wildfly-validate() {
    [ -e "${CONTAINER_DIR}/jboss-modules.jar" ] || {
        red "Invalid Wildfly home: ${CONTAINER_DIR}"
        usage
        exit 1
    }
}

wildfly-pre-install() {
    return 0
}

wildfly-post-uninstall() {
    return 0
}

wildfly-install() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"
    local module="${4}"

    [ -z "${module-}" ] && {
        yellow "Skipping ${group_id}:${artifact_id}:${version} as it has no module.xml"
        return 1
    }

    local module_dir="${module}/main"
    mkdir -p "${WILDFLY_MODULES_DIR}/${module_dir}"
    cp "${WILDFLY_XML_DIR}/${module_dir}/module.xml" "${WILDFLY_MODULES_DIR}/${module_dir}/module.xml"
    install-jar "${WILDFLY_MODULES_DIR}/${module_dir}" "${group_id}" "${artifact_id}" "${version}"
}

wildfly-uninstall() {
    local group_id="${1}"
    local artifact_id="${2}"
    local version="${3}"
    local module="${4}"

    [ -z "${module-}" ] && {
        yellow "Skipping ${group_id}:${artifact_id}:${version} as it has no module.xml"
        return 1
    }

    local module_dir="${module}/main"
    uninstall-jar "${WILDFLY_MODULES_DIR}/${module_dir}" "${group_id}" "${artifact_id}" "${version}"
    [ -e "${WILDFLY_MODULES_DIR}/${module_dir}/module.xml" ] && {
      rm "${WILDFLY_MODULES_DIR}/${module_dir}/module.xml"
    }
    rmdir -p --ignore-fail-on-non-empty "${WILDFLY_MODULES_DIR}/${module_dir}"
}

install-jar() {
    local dest="${1}"
    local group_id="${2}"
    local artifact_id="${3}"
    local version="${4}"

    local name="${artifact_id}-${version}"
    local descriptor="${group_id}:${artifact_id}:${version}:jar"

    local from="${CHAINLINK_REPOSITORY_DIR}/${name}.jar"
    local to="${dest}/${name}.jar"

    [ -e "${to}" ] && {
        echo "Found existing jar at ${to}"
        return 0
    }

    local retval=0
    local method=""
    if [ -e "${from}" ]; then
        cp "${from}" "${to}"
        retval=${?}
        method="distribution"
    else
        maven dependency:copy -Dartifact=${descriptor} -DoutputDirectory=${dest}
        retval=${?}
        method="Maven"
    fi

    if [ ${retval} -eq 0 ]; then
        green "Installed ${descriptor} from ${method} to ${to}"
    else
        red "Failed installing ${descriptor} from ${method}"
    fi

    return ${retval}
}

uninstall-jar() {
    local dir="${1}"
    local group_id="${2}"
    local artifact_id="${3}"
    local version="${4}"

    local descriptor="${artifact_id}-${version}"

    local full="${dir}/${descriptor}.jar"

    [ ! -e "${full}" ] && {
        yellow "No module installed at ${full}"
        return 0
    }

    rm "${full}" > /dev/null 2>&1 # Output from rm appears randomly rather than here
    local retval=${?}

    if [ ${retval} -eq 0 ]; then
        green "Removed ${full}"
    else
        red "Failed removing ${full}"
    fi

    return ${retval}
}

add-module() {
    local target="${1}"
    [ -z "${target-}" ] && {
        return 1
    }
    for module in "${MODULES[@]}"; do
        [ "${module}" == "all" ] && {
            return 0
        }
        [ "${module}" == "${target}" ] && {
            return 0
        }
    done
    MODULES+=("${target}")
    return 0
}

print-modules() {
    local action="${1}"
    local container="${2}"

    local modules=""
    for module in "${MODULES[@]}"; do
        if [ -z "${modules}" ]; then
            modules="${module}"
        else
            modules="${modules}, ${module}"
        fi
    done
    echo "${action} modules for container ${container}: ${modules}"
}

print-available-modules() {
    local action="${1}"

    local modules=""
    for module in "${AVAILABLE_MODULES[@]}"; do
        if [ -z "${modules}" ]; then
            modules="${module}"
        else
            modules="${modules}, ${module}"
        fi
    done
    echo "Available modules: ${modules}"
}

print-available-containers() {
    local containers=""
    for container in "${AVAILABLE_CONTAINERS[@]}"; do
        if [ -z "${containers}" ]; then
            containers="${container}"
        else
            containers="${containers}, ${container}"
        fi
    done
    echo "Available containers: ${containers}"
}

#
# Runner
#


run() {
    [ "${ACTION}" == "install" ] && {
        ${CONTAINER}-pre-install
    }

    "${ACTION}"

    [ "${ACTION}" == "uninstall" ] && {
        ${CONTAINER}-post-uninstall
    }
}

rollback() {
    [ "${ACTION}" == "uninstall" ] && {
       terminate 130
    }
    ROLLING_BACK="true"
    ACTION="uninstall"
    trap 'run' ${SIGUNINSTALL}
    yellow "Rolling back install. Interrupt again to abort."
}

install() {
    add-module "core"
    print-modules "Installing" "${CONTAINER}"
    "${CONTAINER}" install-unless-rolling-back
}

uninstall() {
    print-modules "Installing" "${CONTAINER}"
    "${CONTAINER}" "${CONTAINER}-uninstall"
}

install-unless-rolling-back() {
    [ "${ROLLING_BACK}" == "true" ] && {
        return 1
    }
    "${CONTAINER}-install" ${@}
}

usage() {
cat <<EOF
Usage: install -c container [-d dir] [-m modules] [-u] [-h]

    -h  Print usage.
    -u  Uninstall selected modules.
    -c  The container to install to. Valid values are:
EOF
    for container in "${AVAILABLE_CONTAINERS[@]}"; do
      echo "                    - ${container}"
    done
cat <<EOF
    -d  The root directory of the container to install too. This is
        required for all containers other than "se" which is installed
        in place.
    -m  Comma separated list of modules. Valid values are:
EOF
    for module in "${AVAILABLE_MODULES[@]}"; do
      echo "                    - ${module}"
    done
cat <<EOF
    There are two special modules, "core" and "all". The "core" module
    contains the main jars required to run Chainlink and is implied
    whenever running an install. If the -u option is provided it must
    be specified individually. e.g. This script will install and then
    uninstall the Chainlink core:

        install -c se
        install -c se -u -m core

    The "all" option is a convenience every available module (including
    the core). Providing the options "-u -m all" is the recommended way
    to completely uninstall Chainlink from a container.

Examples:

    Install an SE instance with every available module:

        install -c se -e all

    Install to a Wildfly instance with the Infinispan and jGroups
    modules.

        install -c wildfly -d /usr/local/wildfly -m infinispan,jgroups

    Install to a Glassfish instance with only the core functionality.

        install -c glassfish -d /usr/local/glassfish

    Uninstall two modules from a TomEE instance. The Chainlink core and
    any other installed modules will remain installed.

        install -u -c tomee -d /usr/local/tomee -m mongo,ehcache

    Uninstall Chainlink completely from a Glassfish instance.

        install -u -c glassfish -d /usr/local/glassfish -m all
EOF
}

while getopts "huc:d:m:" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;

        u)
            ACTION="uninstall"
            ;;

        d)
            CONTAINER_DIR="${OPTARG}"
            ;;

        c)
            for container in "${AVAILABLE_CONTAINERS[@]}"; do
                [ "${container}" == "${OPTARG}" ] && {
                    CONTAINER="${OPTARG}"
                    continue 2 #getopts loop
                }
            done
            [ -z "${CONTAINER-}" ] && {
                red "Invalid container: ${OPTARG}"
                print-available-containers
                exit 1
            }
            ;;

        m)
            IFS=',' read -ra TMP <<< "${OPTARG}"
            for module in "${TMP[@]}"; do
                [ "${module}" == "all" ] && {
                    MODULES=("all")
                    continue 2 #getopt loop
                }
                for available in "${AVAILABLE_MODULES[@]}"; do
                    [ "${available}" == "${module}" ] && {
                        add-module "${module}"
                        continue 2 #TMP loop
                    }
                done
                red "Invalid module: ${module}"
                print-available-modules
                exit 1
            done
            ;;

        \?)
            red "Invalid option: -${OPTARG}"
            usage
            exit 1
            ;;

        :)
            red "Option -${OPTARG} requires an argument"
            usage
            exit 1
            ;;
    esac
done

[ -z "${CONTAINER-}" ] && {
    red "Option -c is required"
    print-available-containers
    exit 1
}

trap 'rollback' INT

${CONTAINER}-validate

run

[ "${ROLLING_BACK}" == "true" ] && {
    kill -s ${SIGUNINSTALL} $$
}

exit 0
