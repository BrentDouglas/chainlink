#!/bin/bash
#
# @author <a href="mailto:brent.n.douglas@gmail.com">Brent Douglas</a>
#

[ -e /etc/rc.d/init.d/functions ] && {
    source /etc/rc.d/init.d/functions
}

CHAINLINK_HOME="${CHAINLINK_HOME-..}"
CHAINLINK_PIDFILE="${CHAINLINK_PIDFILE-/var/run/chainlink/chainlink.pid}"
CHAINLINK_LOG_DIR="${CHAINLINK_LOG_DIR-/var/log/chainlink}"
CHAINLINK_OPTS="${CHAINLINK_OPTS--server -Xms256m -Xmx256m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:+UseCompressedOops -Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000}"
CHAINLINK_CONFIG="${CHAINLINK_CONFIG}"
CHAINLINK_PROPERTIES="${CHAINLINK_PROPERTIES}"
CHAINLINK_APP_DIR="${CHAINLINK_APP_DIR-$CHAINLINK_HOME/app}"
CHAINLINK_LIB_DIR="${CHAINLINK_LIB_DIR-$CHAINLINK_HOME/lib}"

DATE="$(date +%F_%H-%M-%S)"
DAEMON=0

CHAINLINK_LOG_FILE="${CHAINLINK_LOG_DIR}/console_${DATE}.log"

START_WAIT=${START_WAIT-30}
STOP_WAIT=${STOP_WAIT-10}

RETVAL=0

usage() {
cat <<EOF
Usage: chainlink [-c configuration_file_name] [-p properties_file_name] [-d] [-k] [-h]
    -c  Set the configuration file to use. Must be found in ${CHAINLINK_HOME}/cnf
    -p  Set the properties file to use. Must be found in ${CHAINLINK_HOME}/cnf
    -d  Start Chainlink in daemon mode
    -k  Kill a running Chainlink daemon
    -h  Print usage
EOF
}

stop() {
    [ -e ${CHAINLINK_PIDFILE} ] || {
        echo "No Chainlink instance running"
        RETVAL=2
        failure
        return ${RETVAL}
    }

    local pid=$(cat ${CHAINLINK_PIDFILE})

    ( ps -p ${pid} ) 2>&1 > /dev/null || {
        echo "Found Chainlink pid file with pid ${pid} but no running process. Removing file."
        rm -f ${CHAINLINK_PIDFILE}
        RETVAL=2
        failure
        return ${RETVAL}
    }

    # Try letting it shutdown gracefully
    kill -15 ${pid}
    count=0
    until [ $count -gt ${STOP_WAIT} ]
    do
        ( ps -p ${pid} ) 2>&1 > /dev/null || {
            RETVAL=0
            break
        }
        sleep 1
        let count=${count+1};
    done

    # If that timed out kill it
    ( ps -p ${pid} ) 2>&1 > /dev/null && {
        kill -9 ${pid}
        RETVAL=${?}
    }

    if [ ${RETVAL} -eq 0 ]; then
        rm -f ${CHAINLINK_PIDFILE}
        success
    else
        failure
    fi
    return ${RETVAL}
}

while getopts "c:p:dhk" opt; do
    case ${opt} in
        # Set the config file name
        c)
            CHAINLINK_CONFIG=${OPTARG}
            ;;
        p)
            CHAINLINK_PROPERTIES=${OPTARG}
            ;;
        # Run as a daemon
        d)
            DAEMON=1
            ;;
        h)
            usage
            exit 0
            ;;
        # Kill a running process
        k)
            stop
            exit ${RETVAL}
            ;;

        \?)
            echo "Invalid option: -${OPTARG}"
            exit 1
            ;;

        :)
            echo "Option -${OPTARG} requires an argument."
            exit 1
            ;;
    esac
done

CHAINLINK_ARGS=""
[ -n "${CHAINLINK_CONFIG}" ] && {
    CHAINLINK_ARGS="${CHAINLINK_ARGS} --configuration ${CHAINLINK_HOME}/cnf/${CHAINLINK_CONFIG}"
}
[ -n "${CHAINLINK_PROPERTIES}" ] && {
    CHAINLINK_ARGS="${CHAINLINK_ARGS} --properties ${CHAINLINK_HOME}/cnf/${CHAINLINK_PROPERTIES}"
}

CLASSPATH="$(find ${CHAINLINK_LIB_DIR} -regex '.*\.jar$' -type f -printf ${CHAINLINK_LIB_DIR}/%f:)$(find ${CHAINLINK_APP_DIR} -regex '.*\.jar$' -type f -printf ${CHAINLINK_APP_DIR}/%f:)"

if [ ${DAEMON} -eq 0 ]; then
    eval "java" "${CHAINLINK_OPTS}" "-cp" "${CLASSPATH}" "io.machinecode.chainlink.server.chainlinkd.Chainlinkd" "${CHAINLINK_ARGS}" "| tee ${CHAINLINK_LOG_FILE}" 2>&1
    RETVAL=${?}
else
    if [ -e ${CHAINLINK_PIDFILE} ]; then
        echo "Chainlink instance running with pid $(cat ${CHAINLINK_PIDFILE})"
        RETVAL=2
    else
        eval "java" "${CHAINLINK_OPTS}" "-cp" "${CLASSPATH}" "io.machinecode.chainlink.server.chainlinkd.Chainlinkd" "${CHAINLINK_ARGS}" "> ${CHAINLINK_LOG_FILE} &" 2>&1
        pid=${!}
        echo ${pid} > ${CHAINLINK_PIDFILE}
        echo "Starting Chainlink with pid ${pid}"

        RETVAL=1
        count=0

        until [ ${count} -gt ${START_WAIT} ]
        do
            (
                [ -e ${CHAINLINK_LOG_FILE} ] && {
                    grep 'CHAINLINK-032000' ${CHAINLINK_LOG_FILE} && {
                        exit 3
                    }
                    grep 'CHAINLINK-032001' ${CHAINLINK_LOG_FILE} && {
                        exit 4
                    }
                }
            ) 2>&1 > /dev/null
            LAST=${?}

            [ ${LAST} -eq 3 ] && {
                RETVAL=0
                break
            }
            [ ${LAST} -eq 4 ] && {
                RETVAL=1
                break
            }
            sleep 1
            let count=${count}+1;
        done
    fi

    if [ ${RETVAL} -eq 0 ]; then
        success
    else
        failure
    fi
fi

exit ${RETVAL}
