package io.machinecode.nock.jsl.test;

import io.machinecode.nock.jsl.api.Job;
import io.machinecode.nock.jsl.fluent.Fluent;
import junit.framework.Assert;
import org.junit.Test;

/**
 * @author Brent Douglas <brent.n.douglas@gmail.com>
 */
public class FluentTest {

    @Test
    public void fluentJobTest() {
        final Job job = Fluent.job()
                .setId("i1")
                .setRestartable(false)
                .setVersion("1.0")
                .addProperty("job-prop", "job-value")
                .addListener(Fluent.listener()
                        .setRef("something")
                        .addProperty("name", "value")
                ).addExecution(Fluent.batchletPlanStep()
                        .setId("step1")
                        .setNext("step2")
                        .setAllowStartIfComplete(true)
                        .setStartLimit(0)
                        .addTransition(Fluent.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.next()
                                .setOn("ERROR")
                                .setTo("sdfg")
                        )
                        .addTransition(Fluent.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Fluent.planPartition()
                                .setMapper(Fluent.plan()
                                        .setThreads(4)
                                        .setPartitions(7)
                                        .addProperty("something", "else")
                                )
                        ).setPart(Fluent.batchlet()
                                .setRef("batch1")
                                .addProperty("a", "prop")
                        )
                ).addExecution(Fluent.batchletMapperStep()
                        .setId("step2")
                        .setNext("step3")
                        .setAllowStartIfComplete(true)
                        .addTransition(Fluent.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.next()
                                .setOn("ERROR")
                                .setTo("sdfg")
                        )
                        .addTransition(Fluent.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Fluent.mapperPartition()
                                .setMapper(Fluent.mapper()
                                        .setRef("mapper1")
                                        .addProperty("something", "else")
                                )
                        ).setPart(Fluent.batchlet()
                                .setRef("batch1")
                                .addProperty("a", "prop")
                        )
                ).addExecution(Fluent.chunkPlanStep()
                        .setId("step3")
                        .setNext("step4")
                        .setAllowStartIfComplete(true)
                        .addTransition(Fluent.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.next()
                                .setOn("ERROR")
                                .setTo("sdfg")
                        )
                        .addTransition(Fluent.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Fluent.planPartition()
                                .setMapper(Fluent.plan()
                                        .setThreads(4)
                                        .setPartitions(7)
                                        .addProperty("something", "else")
                                )
                        ).setPart(Fluent.chunk()
                                .setItemCount(4)
                                .setSkipLimit(3)
                                .setRetryLimit(3)
                                .setTimeLimit(24)
                                .setCheckpointPolicy("custom")
                                .setCheckpointAlgorithm(Fluent.checkpointAlgorithm()
                                        .setRef("checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Fluent.reader()
                                        .setRef("Reader")
                                        .addProperty("", "")
                                )
                                .setProcessor(Fluent.processor()
                                        .setRef("Processor")
                                        .addProperty("", "")
                                )
                                .setWriter(Fluent.writer()
                                        .setRef("Writer")
                                        .addProperty("", "")
                                )
                        )
                ).addExecution(Fluent.chunkMapperStep()
                        .setId("step4")
                        .setNext("step5")
                        .setAllowStartIfComplete(false)
                        .setStartLimit(7)
                        .addTransition(Fluent.end()
                                .setExitStatus("")
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.fail()
                                .setOn("ERROR")
                        )
                        .addTransition(Fluent.next()
                                .setOn("ERROR")
                                .setTo("sdfg")
                        )
                        .addTransition(Fluent.stop()
                                .setOn("ERROR")
                        )
                        .setPartition(Fluent.mapperPartition()
                                .setMapper(Fluent.mapper()
                                        .setRef("mapper2")
                                        .addProperty("something", "else")
                                )
                        ).setPart(Fluent.chunk()
                                .setItemCount(4)
                                .setSkipLimit(3)
                                .setRetryLimit(3)
                                .setTimeLimit(24)
                                .setCheckpointPolicy("item")
                                .setCheckpointAlgorithm(Fluent.checkpointAlgorithm()
                                        .setRef("other-checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Fluent.reader()
                                        .setRef("Reader2")
                                        .addProperty("", "")
                                )
                                .setProcessor(Fluent.processor()
                                        .setRef("Processor2")
                                        .addProperty("", "")
                                )
                                .setWriter(Fluent.writer()
                                        .setRef("Writer2")
                                        .addProperty("", "")
                                )
                        )
                ).build();

        Assert.assertEquals("i1", job.getId());
    }


    @Test
    public void defaultValuesTest() {
        final Job job = Fluent.job()
                .setId("i1")
                //.setRestartable(false)
                //.setVersion("1.0")
                .addProperty("job-prop", "job-value")
                .addListener(Fluent.listener()
                        .setRef("something")
                        .addProperty("name", "value")
                ).addExecution(Fluent.chunkPlanStep()
                        .setId("step1")
                        //.setNext("step2")
                        //.setAllowStartIfComplete(false)
                        //.setStartLimit(0)
                        .setPartition(Fluent.planPartition()
                                .setMapper(Fluent.plan()
                                        //.setPartitions(1)
                                        //.setThreads(1)
                                )
                        ).setPart(Fluent.chunk()
                                //.setCheckpointPolicy("item")
                                //.setItemCount(10)
                                //.setSkipLimit(0)
                                //.setRetryLimit(0)
                                //.setTimeLimit(0)
                                .setCheckpointAlgorithm(Fluent.checkpointAlgorithm()
                                        .setRef("other-checkpoint-algorithm")
                                        .addProperty("", "")
                                )
                                .setSkippableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setRetryableExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setNoRollbackExceptionClasses(Fluent.filter()
                                        .setInclude(Exception.class)
                                        .setExcludes("Throwable", "JAXBException")
                                )
                                .setReader(Fluent.reader()
                                        .setRef("Reader2")
                                        .addProperty("", "")
                                )
                                .setProcessor(Fluent.processor()
                                        .setRef("Processor2")
                                        .addProperty("", "")
                                )
                                .setWriter(Fluent.writer()
                                        .setRef("Writer2")
                                        .addProperty("", "")
                                )
                        )
                ).addExecution(Fluent.chunkPlanStep()
                        .setId("step2")
                ).build();

        XmlTest.testDefaults(job);
    }
}
